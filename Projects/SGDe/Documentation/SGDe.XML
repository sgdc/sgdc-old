<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SGDe</name>
    </assembly>
    <members>
        <member name="T:SGDE.Content.Code.Library.String">
            <summary>
            The String class is a data type that represents a string of characters.
            </summary>
        </member>
        <member name="T:SGDE.Content.Code.Library.Object">
            <summary>
            The Object class is at the root of the ActionScript class hierarchy.
            </summary>
        </member>
        <member name="M:SGDE.Content.Code.Library.Object.#ctor">
            <summary>
            Creates an Object object and stores a reference to the object's constructor method in the object's constructor property.
            </summary>
        </member>
        <member name="M:SGDE.Content.Code.Library.Object.toString">
            <summary>
            Returns the string representation of the specified object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Object.toLocaleString">
            <summary>
            Returns the string representation of this object, formatted according to locale-specific conventions.
            </summary>
            <returns>A string representation of this object formatted according to local conventions.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Object.valueOf">
            <summary>
            Returns the primitive value of the specified object.
            </summary>
            <returns>The primitive value of this object or the object itself.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Object.hasOwnProperty(SGDE.Content.Code.Library.String)">
            <summary>
            Indicates whether an object has a specified property defined.
            </summary>
            <param name="name">The property of the object.</param>
            <returns>If the target object has the property specified by the name parameter this value is true, otherwise false.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Object.isPrototypeOf(SGDE.Content.Code.Library.Object)">
            <summary>
            Indicates whether an instance of the Object class is in the prototype chain of the object specified as the parameter.
            </summary>
            <param name="theClass">The class to which the specified object may refer.</param>
            <returns>If the object is in the prototype chain of the object specified by the theClass parameter this value is true, otherwise false.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Object.propertyIsEnumerable(SGDE.Content.Code.Library.String)">
            <summary>
            Indicates whether the specified property exists and is enumerable.
            </summary>
            <param name="name">The property of the object.</param>
            <returns>If the property specified by the name parameter is enumerable this value is true, otherwise false.</returns>
        </member>
        <member name="P:SGDE.Content.Code.Library.Object.constructor">
            <summary>
            A reference to the class object or constructor function for a given object instance.
            </summary>
        </member>
        <member name="P:SGDE.Content.Code.Library.Object.__proto__">
            <summary>
            A reference to the prototype object of a class or function object.
            </summary>
        </member>
        <member name="M:SGDE.Content.Code.Library.String.#ctor(SGDE.Content.Code.Library.String)">
            <summary>
            Creates a new String object initialized to the specified string.
            </summary>
            <param name="val">The initial value of the new String object.</param>
        </member>
        <member name="M:SGDE.Content.Code.Library.String.op_Implicit(System.String)~SGDE.Content.Code.Library.String">
            <summary>
            Convert a primitive string to a String.
            </summary>
            <param name="s">The string value to create the String with.</param>
            <returns>The created String.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.String.op_Implicit(SGDE.Content.Code.Library.String)~System.String">
            <summary>
            Convert a String to a primitive string.
            </summary>
            <param name="s">The String to convert to a string.</param>
            <returns>The retrieved string.</returns>
        </member>
        <member name="T:SGDE.Graphics.Sprite">
            <summary>
            A drawable sprite object that can be displayed on screen.
            </summary>
        </member>
        <member name="T:SGDE.SceneNode">
            <summary>
            Base class for any and all classes which can be added to the scene graph
            </summary>
        </member>
        <member name="M:SGDE.SceneNode.#ctor">
            <summary>
            Constructor for a scene node
            </summary>
        </member>
        <member name="M:SGDE.SceneNode.SetTranslation(Microsoft.Xna.Framework.Vector2)">
            <summary>Sets the translation of the scene node</summary>
            <param name="translation">Translation vector</param>
        </member>
        <member name="M:SGDE.SceneNode.SetRotation(System.Single)">
            <summary>
            Set the rotation of this scene node.
            </summary>
            <param name="rotation">Degree measure for rotation.</param>
        </member>
        <member name="M:SGDE.SceneNode.Rotate(System.Single)">
            <summary>
            Change the rotation of this scene node.
            </summary>
            <param name="rotation">The deleta degree measure for rotation.</param>
        </member>
        <member name="M:SGDE.SceneNode.GetRotation">
            <summary>
            Get the rotation of this scene node.
            </summary>
            <returns>The degree measure of this scene node.</returns>
        </member>
        <member name="M:SGDE.SceneNode.GetAsType``1">
            <summary>
            Get this node element as the specified type.
            </summary>
            <typeparam name="T">Type of object to get.</typeparam>
            <returns>This node as the specified type or the default value of that type.</returns>
        </member>
        <member name="F:SGDE.Graphics.Sprite.overrideAtt">
            <summary>
            The current SpriteAttributes that can override the Sprite's default attributes.
            </summary>
        </member>
        <member name="M:SGDE.Graphics.Sprite.#ctor">
            <summary>
            Create a new Sprite with default values.
            </summary>
        </member>
        <member name="M:SGDE.Graphics.Sprite.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draw this Sprite.
            </summary>
            <param name="gameTime">The GameTime since the last draw.</param>
        </member>
        <member name="M:SGDE.Graphics.Sprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update this Sprite.
            </summary>
            <param name="gameTime">The GameTime since the last update.</param>
        </member>
        <member name="M:SGDE.Graphics.Sprite.OverrideAnimation(SGDE.Graphics.Sprite.SpriteAttributes,System.Nullable{System.Boolean})">
            <summary>
            Some attributes about a Sprite can be determined by it's animation. This function allows the determination of what attributes are allowed to be set by the animation and what are user determined.
            </summary>
            <param name="component">What component of the Sprite should be get/set.</param>
            <param name="allowed"><code>true</code> if this compoennt can be overriden by the Sprite's animation, <code>false</code> is otherwise. Can also be set to <code>null</code> if the value should be returned.</param>
            <returns><code>true</code> if the the Sprite's animation can override the developer setting, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Graphics.Sprite.CopySpriteTo(SGDE.Graphics.Sprite@)">
            <summary>
            Copy this Sprite to another Sprite.
            </summary>
            <param name="sp">The Sprite to copy to.</param>
        </member>
        <member name="P:SGDE.Graphics.Sprite.Center">
            <summary>
            Get the center of the Sprite based off it's current animation.
            </summary>
        </member>
        <member name="P:SGDE.Graphics.Sprite.Width">
            <summary>
            Get the width of the Sprite based off it's current animation.
            </summary>
        </member>
        <member name="P:SGDE.Graphics.Sprite.Height">
            <summary>
            Get the height of the Sprite based off it's current animation.
            </summary>
        </member>
        <member name="P:SGDE.Graphics.Sprite.Tint">
            <summary>
            Get or set the tint to apply to this Sprite. This can be overriden, if allowed, by the Sprite animation.
            </summary>
        </member>
        <member name="P:SGDE.Graphics.Sprite.Frame">
            <summary>
            Get or set the current animation Frame
            </summary>
        </member>
        <member name="P:SGDE.Graphics.Sprite.FPS">
            <summary>
            Get or set the current animation FPS.
            </summary>
        </member>
        <member name="P:SGDE.Graphics.Sprite.IsVisible">
            <summary>
            Get if this Sprite is potentially visible on screen or not.
            </summary>
        </member>
        <member name="P:SGDE.Graphics.Sprite.Visible">
            <summary>
            If this Sprite is visible.
            </summary>
        </member>
        <member name="T:SGDE.Graphics.Sprite.SpriteAttributes">
            <summary>
            Sprite attributes that can be overriden by Sprite animation.
            </summary>
        </member>
        <member name="F:SGDE.Graphics.Sprite.SpriteAttributes.None">
            <summary>
            This space intentionally left blank...
            </summary>
        </member>
        <member name="F:SGDE.Graphics.Sprite.SpriteAttributes.Tint">
            <summary>
            The Sprite's tint.
            </summary>
        </member>
        <member name="F:SGDE.Graphics.Sprite.SpriteAttributes.RotationAbs">
            <summary>
            The Sprite's rotation is absoulte.
            </summary>
        </member>
        <member name="F:SGDE.Graphics.Sprite.SpriteAttributes.RotationRel">
            <summary>
            The Sprite's rotation is relitive.
            </summary>
        </member>
        <member name="F:SGDE.Graphics.Sprite.SpriteAttributes.ScaleAbs">
            <summary>
            The Sprite's scale is absoulte.
            </summary>
        </member>
        <member name="F:SGDE.Graphics.Sprite.SpriteAttributes.ScaleRel">
            <summary>
            The Sprite's scale is relitive.
            </summary>
        </member>
        <member name="F:SGDE.Graphics.Sprite.SpriteAttributes.FPS">
            <summary>
            The Sprite's FPS
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.SpriteReader`1">
            <summary>
            Read and process a Sprite class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.SpriteReader`1.Read(Microsoft.Xna.Framework.Content.ContentReader,`0)">
            <summary>
            Read a Sprite.
            </summary>
        </member>
        <member name="T:SGDE.Input.InputManager">
            <summary>
            Handles all input.
            </summary>
        </member>
        <member name="M:SGDE.Input.InputManager.AddNewConverter(SGDE.Input.InputConverter)">
            <summary>
            Add a new input converter.
            </summary>
            <param name="converter">The input converter to add.</param>
            <returns><code>true</code> if the converter was added, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.InputManager.RemoveConverter(SGDE.Input.InputConverter)">
            <summary>
            Remove a input converter.
            </summary>
            <param name="converter">The input converter to remove.</param>
            <returns><code>true</code> if the converter was removed, <code>false</code> if otherwise.</returns>
        </member>
        <member name="T:SGDE.Input.InputHandler">
            <summary>
            Handle input operations.
            </summary>
        </member>
        <member name="M:SGDE.Input.InputHandler.HandleInput(SGDE.Game,SGDE.Input.InputComponent)">
            <summary>
            Handle input operations. If this InputHandler supports more then one input device then it will be called more then once, one for each input device.
            </summary>
            <param name="game">The current, calling, game.</param>
            <param name="input">The input component that can be used to handle input.</param>
        </member>
        <member name="P:SGDE.Input.InputHandler.Handles">
            <summary>
            Get what input type this handler can process.
            </summary>
        </member>
        <member name="P:SGDE.Input.InputHandler.Enabled">
            <summary>
            Get if this input handler is enabled.
            </summary>
        </member>
        <member name="P:SGDE.Input.InputHandler.IndexSpecific">
            <summary>
            Is the input handler input specific. Only used GamePad support.
            </summary>
        </member>
        <member name="P:SGDE.Input.InputHandler.Index">
            <summary>
            What index this input handler supports. Used only when IndexSpecific is <code>true</code>.
            </summary>
        </member>
        <member name="T:SGDE.Input.InputConverter">
            <summary>
            Convert from one input format to another.
            </summary>
        </member>
        <member name="P:SGDE.Input.InputConverter.ConvertFrom">
            <summary>
            Get what input type this converter converts from. You cannot append more then one type. Only a basic comparison is used ot check "from" types.
            </summary>
        </member>
        <member name="P:SGDE.Input.InputConverter.ConvertTo">
            <summary>
            Get what input this converter converts to. You cannot append more then one type. Only a basic comparison is used ot check "to" types.
            </summary>
        </member>
        <member name="T:SGDE.Input.InputComponent">
            <summary>
            An input component from InputType.
            </summary>
        </member>
        <member name="P:SGDE.Input.InputComponent.Type">
            <summary>
            Get what type of input this input component comprises.
            </summary>
        </member>
        <member name="T:SGDE.Input.InputType">
            <summary>
            The input type in use
            </summary>
        </member>
        <member name="F:SGDE.Input.InputType.GamePad">
            <summary>
            Any game controller
            </summary>
        </member>
        <member name="F:SGDE.Input.InputType.Mouse">
            <summary>
            A Mouse
            </summary>
        </member>
        <member name="F:SGDE.Input.InputType.Keyboard">
            <summary>
            A keyboard
            </summary>
        </member>
        <member name="F:SGDE.Input.InputType.Touchscreen">
            <summary>
            A touchscreen device
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.AnimationReader">
            <summary>
            Read and process a SpriteAnimation class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.AnimationReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.Graphics.SpriteManager.SpriteAnimation)">
            <summary>
            Read a SpriteAnimation.
            </summary>
        </member>
        <member name="F:SGDE.Content.ContentUtil.LoadingBuilders">
            <summary>
            Loading entity builders.
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.GameReader">
            <summary>
            Read and process a GameContent class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.GameReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.Content.DataTypes.GameContent)">
            <summary>
            Read a GameContent.
            </summary>
        </member>
        <member name="T:SGDE.Physics.Collision.CollisionChief">
            <summary>
            Not sure yet...
            </summary>
        </member>
        <member name="T:SGDE.Input.MouseButton">
            <summary>
            Mouse buttons
            </summary>
        </member>
        <member name="F:SGDE.Input.MouseButton.LeftButton">
            <summary>
            Left mouse button.
            </summary>
        </member>
        <member name="F:SGDE.Input.MouseButton.MiddleButton">
            <summary>
            Middle mouse button.
            </summary>
        </member>
        <member name="F:SGDE.Input.MouseButton.RightButton">
            <summary>
            Right mouse button.
            </summary>
        </member>
        <member name="F:SGDE.Input.MouseButton.XButton1">
            <summary>
            XBUTTON1 mouse button.
            </summary>
        </member>
        <member name="F:SGDE.Input.MouseButton.XButton2">
            <summary>
            XBUTTON2 mouse button.
            </summary>
        </member>
        <member name="T:SGDE.Input.Mouse">
            <summary>
            A mouse input device.
            </summary>
        </member>
        <member name="M:SGDE.Input.Mouse.GetCurrentState">
            <summary>
            Get the current Mouse input state.
            </summary>
            <returns>The current, native, input state of the Mouse.</returns>
        </member>
        <member name="M:SGDE.Input.Mouse.GetPastState">
            <summary>
            Get the past Mouse input state.
            </summary>
            <returns>The past, native, input state of the Mouse.</returns>
        </member>
        <member name="M:SGDE.Input.Mouse.IsButtonPressed(SGDE.Input.MouseButton)">
            <summary>
            Determine if the specified button is pressed.
            </summary>
            <param name="but">The button to check if pressed.</param>
            <returns><code>true</code> if the button was pressed, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.Mouse.IsButtonClicked(SGDE.Input.MouseButton)">
            <summary>
            Determine if the specified button is clicked. This means that the button is down right now but wasn't always pressed down.
            </summary>
            <param name="but">The button to check if pressed.</param>
            <returns><code>true</code> if the button was pressed, <code>false</code> if otherwise.</returns>
        </member>
        <member name="P:SGDE.Input.Mouse.Type">
            <summary>
            Always returns Mouse.
            </summary>
        </member>
        <member name="P:SGDE.Input.Mouse.Position">
            <summary>
            Get or set the mouse position. Positions are relative to the upper-left hand corner of the window.
            </summary>
        </member>
        <member name="P:SGDE.Input.Mouse.PastPosition">
            <summary>
            Get the past mouse position. Positions are relative to the upper-left hand corner of the window.
            </summary>
        </member>
        <member name="P:SGDE.Input.Mouse.PositionDiff">
            <summary>
            Get the mouse position difference between the current and past positions.
            </summary>
        </member>
        <member name="P:SGDE.Input.Mouse.Scoll">
            <summary>
            Get the mouse scroll wheel position.
            </summary>
        </member>
        <member name="P:SGDE.Input.Mouse.PastScoll">
            <summary>
            Get the past mouse scroll wheel position.
            </summary>
        </member>
        <member name="P:SGDE.Input.Mouse.ScollDiff">
            <summary>
            Get the mouse scroll wheel position difference between current and past scroll positions.
            </summary>
        </member>
        <member name="T:SGDE.Input.GamePadComponent">
            <summary>
            The possible input components of a GamePad.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.A">
            <summary>
            The A button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.B">
            <summary>
            The B button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.X">
            <summary>
            The X button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.Y">
            <summary>
            The Y button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.Start">
            <summary>
            The Start button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.Back">
            <summary>
            The Back button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.BigButton">
            <summary>
            The BigButton button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.DPadUp">
            <summary>
            D-Pad, Up
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.DPadRight">
            <summary>
            D-Pad, Right
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.DPadDown">
            <summary>
            D-Pad, Down
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.DPadLeft">
            <summary>
            D-Pad, Left
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.LeftShoulder">
            <summary>
            The Left Shoulder (bumper) button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.RightShoulder">
            <summary>
            The Right Shoulder (bumper) button.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.LeftStick">
            <summary>
            The Left Stick.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.RightStick">
            <summary>
            The Right Stick.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.LeftTrigger">
            <summary>
            The Left Trigger.
            </summary>
        </member>
        <member name="F:SGDE.Input.GamePadComponent.RightTrigger">
            <summary>
            The Left Trigger.
            </summary>
        </member>
        <member name="T:SGDE.Input.GamePad">
            <summary>
            A gamepad input device.
            </summary>
        </member>
        <member name="M:SGDE.Input.GamePad.GetCurrentState">
            <summary>
            Get the current GamePad input state.
            </summary>
            <returns>The current, native, input state of the GamePad.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetPastState">
            <summary>
            Get the past GamePad input state.
            </summary>
            <returns>The past, native, input state of the GamePad.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.SetVibration(System.Single,System.Boolean)">
            <summary>
            Set the game pad's vibration.
            </summary>
            <param name="motor">The speed of the motor, between 0.0 and 1.0.</param>
            <param name="leftMotor"><code>true</code> if the vibration should be set on the left, low-frequency, motor. <code>false</code> if the vibration should be set on the right, high-frequency, motor.</param>
            <returns><code>true</code> if the vibration was set, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.SetVibration(System.Single,System.Single)">
            <summary>
            Set the game pad's vibration.
            </summary>
            <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
            <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
            <returns><code>true</code> if the vibration was set, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.IsButtonPressed(SGDE.Input.GamePadComponent)">
            <summary>
            Determine if the specified button is pressed.
            </summary>
            <param name="com">The button to check if pressed. Supports A, B, X, Y, Back, Start, BigButton, LeftShoulder, LeftStick, RightShoulder, RightStick, and the D-Pad.</param>
            <returns><code>true</code> if the button was pressed, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.IsButtonClicked(SGDE.Input.GamePadComponent)">
            <summary>
            Determine if the specified button is clicked. This means that the button is down right now but wasn't always pressed down.
            </summary>
            <param name="com">The button to check if pressed. Supports A, B, X, Y, Back, Start, BigButton, LeftShoulder, LeftStick, RightShoulder, RightStick, and the D-Pad.</param>
            <returns><code>true</code> if the button was pressed, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetThumbstickPosition(SGDE.Input.GamePadComponent)">
            <summary>
            Get the position of the thumbstick control as a 2D vector.
            </summary>
            <param name="com">Which thumbstick to get, only support LeftStick, and RightStick.</param>
            <returns>A 2D vector defining the thumbstick position.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetPastThumbstickPosition(SGDE.Input.GamePadComponent)">
            <summary>
            Get the past position of the thumbstick control as a 2D vector.
            </summary>
            <param name="com">Which thumbstick to get, only support LeftStick, and RightStick.</param>
            <returns>A 2D vector defining the thumbstick position from the previous state.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetThumbstickPositionDifference(SGDE.Input.GamePadComponent)">
            <summary>
            Get the difference of the thumbstick between the current and previous state.
            </summary>
            <param name="com">Which thumbstick to get, only support LeftStick, and RightStick.</param>
            <returns>The difference between the current and past state as a 2D vector.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetTrigger(SGDE.Input.GamePadComponent)">
            <summary>
            Get the trigger position.
            </summary>
            <param name="com">Which trigger to get, only support LeftTrigger, and RightTrigger.</param>
            <returns>A scalar value from 0 to 1 defining the trigger position where 0 is a completely unpressed trigger.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetPastTrigger(SGDE.Input.GamePadComponent)">
            <summary>
            Get the past trigger position.
            </summary>
            <param name="com">Which trigger to get, only support LeftTrigger, and RightTrigger.</param>
            <returns>A scalar value from 0 to 1 defining the trigger position of the past state where 0 is a completely unpressed trigger.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetTriggerDifference(SGDE.Input.GamePadComponent)">
            <summary>
            Get the difference of the trigger between the current and previous state.
            </summary>
            <param name="com">Which trigger to get, only support LeftTrigger, and RightTrigger.</param>
            <returns>The difference between the current and past state as a scalar value between 0 and 1.</returns>
        </member>
        <member name="M:SGDE.Input.GamePad.GetGamePadCapability">
            <summary>
            Get what the GamePad is capable of.
            </summary>
            <returns>The current GamePad's capabilities.</returns>
        </member>
        <member name="P:SGDE.Input.GamePad.Type">
            <summary>
            Always returns GamePad.
            </summary>
        </member>
        <member name="P:SGDE.Input.GamePad.PlayerIndex">
            <summary>
            Get what PlayerIndex this GamePad represents.
            </summary>
        </member>
        <member name="P:SGDE.Input.GamePad.IsConnected">
            <summary>
            Get if the GamePad is connected.
            </summary>
        </member>
        <member name="P:SGDE.Input.GamePad.DeadZone">
            <summary>
            Get or set the GamePad's dead zone. This affects only the GamePad at the specified <see cref="P:SGDE.Input.GamePad.PlayerIndex"/>. If set, the dead zone will be updated on the next update.
            </summary>
        </member>
        <member name="P:SGDE.Input.GamePad.GamePadType">
            <summary>
            Get what kind of GamePad is in use.
            </summary>
        </member>
        <member name="T:SGDE.Content.Code.Code">
            <summary>
            Used Internally
            </summary>
        </member>
        <member name="T:SGDE.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SGDE.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SGDE.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SGDE.Messages.Code_CannotEvaluate">
            <summary>
              Looks up a localized string similar to Cannot evaluate code. Arguments could be required..
            </summary>
        </member>
        <member name="P:SGDE.Messages.ContentUtil_DIDExists">
            <summary>
              Looks up a localized string similar to Concurrency error.
            </summary>
        </member>
        <member name="P:SGDE.Messages.Game_TooManyGames">
            <summary>
              Looks up a localized string similar to Only one SGDe game can be run at a time..
            </summary>
        </member>
        <member name="P:SGDE.Messages.GameContent_LevelNotExist">
            <summary>
              Looks up a localized string similar to Level does not exist..
            </summary>
        </member>
        <member name="P:SGDE.Messages.GameReader_OnlyOneGameContent">
            <summary>
              Looks up a localized string similar to Only one game content can exist..
            </summary>
        </member>
        <member name="P:SGDE.Messages.NodeReader_SceneNodeAbstract">
            <summary>
              Looks up a localized string similar to SceneNode cannot be loaded independent of another type..
            </summary>
        </member>
        <member name="P:SGDE.Messages.SpriteManager_AnimationIDMismatch">
            <summary>
              Looks up a localized string similar to Animation ID does not match saved ID.
            </summary>
        </member>
        <member name="P:SGDE.Messages.SpriteManager_AnimationSetIDMismatch">
            <summary>
              Looks up a localized string similar to Animation Set ID does not match saved ID.
            </summary>
        </member>
        <member name="P:SGDE.Messages.SpriteManager_SpriteIDMismatch">
            <summary>
              Looks up a localized string similar to Texture ID does not match saved ID.
            </summary>
        </member>
        <member name="T:SGDE.Game">
            <summary>
            Base game that wraps much of the game's functions so they can be adjusted from the Game editor.
            </summary>
        </member>
        <member name="M:SGDE.Game.#ctor">
            <summary>
            Create a new Game.
            </summary>
        </member>
        <member name="M:SGDE.Game.Initialize">
            <summary>
            Initialize the game components.
            </summary>
        </member>
        <member name="M:SGDE.Game.LoadContent">
            <summary>
            Load game content. If overriden, call this functions before attempting to load any other content.
            </summary>
        </member>
        <member name="M:SGDE.Game.GetContent``1(System.String)">
            <summary>
            Get loaded content from this Game.
            </summary>
            <typeparam name="T">The data type that is expected to be returned.</typeparam>
            <param name="gameElement">The developer-defined name for a component.</param>
            <returns>The requested content, if it exists, or the default value of the content.</returns>
        </member>
        <member name="M:SGDE.Game.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update the game.
            </summary>
        </member>
        <member name="M:SGDE.Game.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draw the game. The order that draw operations occur in: <see cref="M:SGDE.Game.PreBeginSpriteBatch(Microsoft.Xna.Framework.GameTime)"/>, <see cref="M:SGDE.Game.BeginSpriteBatch(Microsoft.Xna.Framework.GameTime)"/>, <see cref="M:SGDE.Game.PreDraw(Microsoft.Xna.Framework.GameTime)"/>, draw game, <see cref="M:SGDE.Game.PostDraw(Microsoft.Xna.Framework.GameTime)"/>, <see cref="M:SGDE.Game.EndSpriteBatch(Microsoft.Xna.Framework.GameTime)"/>, <see cref="M:SGDE.Game.PostEndSpriteBatch(Microsoft.Xna.Framework.GameTime)"/>.
            </summary>
        </member>
        <member name="M:SGDE.Game.PreBeginSpriteBatch(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The first operation in the draw pipeline.
            </summary>
        </member>
        <member name="M:SGDE.Game.BeginSpriteBatch(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The second operation in the draw pipeline. Begin the SpriteBatch operation. This is primarily a helper function to handle camera.
            </summary>
        </member>
        <member name="M:SGDE.Game.PreDraw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The third operation in the draw pipeline.
            </summary>
        </member>
        <member name="M:SGDE.Game.PostDraw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The fifth operation in the draw pipeline.
            </summary>
        </member>
        <member name="M:SGDE.Game.EndSpriteBatch(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The sixth operation in the draw pipeline. End the SpriteBatch operation.
            </summary>
        </member>
        <member name="M:SGDE.Game.PostEndSpriteBatch(Microsoft.Xna.Framework.GameTime)">
            <summary>
            The seventh operation in the draw pipeline.
            </summary>
        </member>
        <member name="P:SGDE.Game.CurrentGame">
            <summary>
            Gets the current running game.
            </summary>
        </member>
        <member name="P:SGDE.Game.SpriteBatch">
            <summary>
            Get the current SpriteBatch.
            </summary>
        </member>
        <member name="P:SGDE.Game.GameContentName">
            <summary>
            Get or set the name of the game content that will be loaded. If this value is set after the <see cref="M:SGDE.Game.Initialize"/> function has executed it will be ignored. If the value is null, empty, or made 
            of white-spaces it will be ignored as well. If this value references a game content that doesn't exist it will throw an exception.
            </summary>
        </member>
        <member name="P:SGDE.Game.CameraControl">
            <summary>
            Get the camera control for this Game.
            </summary>
        </member>
        <member name="T:SGDE.Content.Code.Library.Number">
            <summary>
            A data type representing an IEEE-754 double-precision floating-point number.
            </summary>
        </member>
        <member name="F:SGDE.Content.Code.Library.Number.MAX_VALUE">
            <summary>
            The largest representable number (double-precision IEEE-754).
            </summary>
        </member>
        <member name="F:SGDE.Content.Code.Library.Number.MIN_VALUE">
            <summary>
            The smallest representable non-negative, non-zero, number (double-precision IEEE-754).
            </summary>
        </member>
        <member name="F:SGDE.Content.Code.Library.Number.NaN">
            <summary>
            The IEEE-754 value representing Not a Number (NaN).
            </summary>
        </member>
        <member name="F:SGDE.Content.Code.Library.Number.NEGATIVE_INFINITY">
            <summary>
            Specifies the IEEE-754 value representing negative infinity.
            </summary>
        </member>
        <member name="F:SGDE.Content.Code.Library.Number.POSITIVE_INFINITY">
            <summary>
            Specifies the IEEE-754 value representing positive infinity.
            </summary>
        </member>
        <member name="M:SGDE.Content.Code.Library.Number.#ctor(SGDE.Content.Code.Library.Object)">
            <summary>
            Creates a Number object with the specified value.
            </summary>
            <param name="num">The numeric value of the Number instance being created or a value to be converted to a Number.</param>
        </member>
        <member name="M:SGDE.Content.Code.Library.Number.op_Implicit(System.Double)~SGDE.Content.Code.Library.Number">
            <summary>
            Convert a primitive double to a Number.
            </summary>
            <param name="d">The double value to create the Number with.</param>
            <returns>The created Number.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Number.op_Implicit(SGDE.Content.Code.Library.Number)~System.Double">
            <summary>
            Convert a Number to a primitive double.
            </summary>
            <param name="n">The Number to convert to a double.</param>
            <returns>The retrieved double.</returns>
        </member>
        <member name="T:SGDE.Content.Readers.NodeReader">
            <summary>
            Read and process a SceneNode class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.NodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.SceneNode)">
            <summary>
            Read a SceneNode.
            </summary>
        </member>
        <member name="P:SGDE.Content.Readers.NodeReader.CanDeserializeIntoExistingObject">
            <summary>
            Can deserialize into an existing object. Have to do that for Nodes.
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.BitmapSpriteReader">
            <summary>
            Read and process a BitmapSprite class
            </summary>
        </member>
        <member name="T:SGDE.Camera">
            <summary>
            Camera control class.
            </summary>
        </member>
        <member name="P:SGDE.Camera.Position">
            <summary>
            Get or set the position of the camera.
            </summary>
        </member>
        <member name="P:SGDE.Camera.Rotation">
            <summary>
            Get or set the rotation of the camera in radians.
            </summary>
        </member>
        <member name="P:SGDE.Camera.Scale">
            <summary>
            Get or set the scale of the camera.
            </summary>
        </member>
        <member name="P:SGDE.Camera.TransformMatrix">
            <summary>
            Get the transform matrix of the camera.
            </summary>
        </member>
        <member name="T:SGDE.Entity">
            <summary>
            Base Class representative of any onscreen drawable that appears in a scene
            </summary>
        </member>
        <member name="F:SGDE.Entity.image">
            <summary>Sprite which is drawn to represent the entity</summary>
        </member>
        <member name="F:SGDE.Entity.mCollisionUnit">
            <summary>Contains the collision logic for the entity</summary>
        </member>
        <member name="F:SGDE.Entity.id">
            <summary> ID for Checking the type of an Entity </summary>
        </member>
        <member name="M:SGDE.Entity.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new entity in the scene
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
        </member>
        <member name="M:SGDE.Entity.#ctor(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Constructs a new entity in the scene
            </summary>
            <param name="position">Coordinates</param>
        </member>
        <member name="M:SGDE.Entity.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Called once during each step taken by the engine
            </summary>
            <param name="gameTime">The current game time</param>
        </member>
        <member name="M:SGDE.Entity.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>Draws the entity to the screen</summary>
        </member>
        <member name="M:SGDE.Entity.SetColor(Microsoft.Xna.Framework.Color)">
            <summary>
            Set the entity's tint.
            </summary>
            <param name="backColor">The tint to use.</param>
        </member>
        <member name="M:SGDE.Entity.CopyTo(SGDE.Entity@)">
            <summary>
            Copy this Entity to another entity. If overriden then the base.CopyTo call must be the first line of code.
            </summary>
            <param name="ent">The entity to copy to.</param>
        </member>
        <member name="P:SGDE.Entity.Enabled">
            <summary>
            Get or set if the Entity component is enabled or not. If the entity is enabled then the following functions are called: Update, HandleInput.
            </summary>
        </member>
        <member name="P:SGDE.Entity.SpriteImage">
            <summary>
            Get the Entity's Sprite component.
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.VectorSpriteReader">
            <summary>
            Read and process a VectorSprite class
            </summary>
        </member>
        <member name="T:SGDE.Content.DataTypes.MapContent">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="M:SGDE.Content.DataTypes.MapContent.#ctor">
            <summary>
            Create a new MapContent object.
            </summary>
        </member>
        <member name="T:SGDE.Content.DataTypes.EntityBuilder">
            <summary>
            Used Internally
            </summary>
        </member>
        <member name="T:SGDE.Graphics.VectorSprite">
            <summary>
            A vector based Sprite.
            </summary>
        </member>
        <member name="T:SGDE.Graphics.BitmapSprite">
            <summary>
            A bitmap based Sprite.
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.EntityReader">
            <summary>
            Read and process a Entity class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.EntityReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.Entity)">
            <summary>
            Read a Entity.
            </summary>
        </member>
        <member name="P:SGDE.Content.Readers.EntityReader.TypeVersion">
            <summary>
            Get the current version of the Entity Reader.
            </summary>
        </member>
        <member name="T:SGDE.Content.Code.Library.Math">
            <summary>
            The Math class contains methods and constants that represent common mathematical functions and values.
            </summary>
        </member>
        <member name="F:SGDE.Content.Code.Library.Math.PI">
            <summary>
            A mathematical constant for the ratio of the circumference of a circle to its diameter, expressed as pi, with a value of 3.141592653589793.
            </summary>
        </member>
        <member name="T:SGDE.Input.Keyboard">
            <summary>
            A keyboard input device.
            </summary>
        </member>
        <member name="M:SGDE.Input.Keyboard.GetCurrentState">
            <summary>
            Get the current keyboard input state.
            </summary>
            <returns>The current, native, input state of the Keyboard.</returns>
        </member>
        <member name="M:SGDE.Input.Keyboard.GetPastState">
            <summary>
            Get the past keyboard input state.
            </summary>
            <returns>The past, native, input state of the Keyboard.</returns>
        </member>
        <member name="M:SGDE.Input.Keyboard.IsKeyClicked(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Get if the specified key is clicked. This means that the key is down right now but wasn't always pressed down.
            </summary>
            <param name="key">The key to check if clicked.</param>
            <returns><code>true</code> if the key is clicked, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.Keyboard.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Get if the specified key is pressed. This means that the key is down right now.
            </summary>
            <param name="key">The key to check if pressed.</param>
            <returns><code>true</code> if the key is pressed, <code>false</code> if otherwise.</returns>
        </member>
        <member name="M:SGDE.Input.Keyboard.GetPressedKeys">
            <summary>
            Get the currently pressed keys.
            </summary>
            <returns>A list of the pressed keys.</returns>
        </member>
        <member name="M:SGDE.Input.Keyboard.GetClickedKeys">
            <summary>
            Get the currently clicked keys.
            </summary>
            <returns>A list of the clicked keys.</returns>
        </member>
        <member name="P:SGDE.Input.Keyboard.Type">
            <summary>
            Always returns Keyboard.
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.MapReader">
            <summary>
            Read and process a MapContent class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.MapReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.Content.DataTypes.MapContent)">
            <summary>
            Read a MapContent.
            </summary>
        </member>
        <member name="T:SGDE.Content.Code.Library.Boolean">
            <summary>
            A Boolean object is a data type that can have one of two values, either true or false, used for logical operations.
            </summary>
        </member>
        <member name="M:SGDE.Content.Code.Library.Boolean.#ctor(SGDE.Content.Code.Library.Object)">
            <summary>
            Creates a Boolean object with the specified value.
            </summary>
            <param name="expression">Any expression.</param>
        </member>
        <member name="M:SGDE.Content.Code.Library.Boolean.toString">
            <summary>
            Returns the string representation ("true" or "false") of the Boolean object.
            </summary>
            <returns>The string "true" or "false".</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Boolean.op_Implicit(System.Boolean)~SGDE.Content.Code.Library.Boolean">
            <summary>
            Convert a primitive bool to a Boolean.
            </summary>
            <param name="b">The bool value to create the Boolean with.</param>
            <returns>The created Boolean.</returns>
        </member>
        <member name="M:SGDE.Content.Code.Library.Boolean.op_Implicit(SGDE.Content.Code.Library.Boolean)~System.Boolean">
            <summary>
            Convert a Boolean to a primitive bool.
            </summary>
            <param name="b">The Boolean to convert to a bool.</param>
            <returns>The retrieved bool.</returns>
        </member>
        <member name="T:SGDE.Content.Readers.CodeReader">
            <summary>
            Read and process a Code class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.CodeReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.Content.Code.Code)">
            <summary>
            Read a Code.
            </summary>
        </member>
        <member name="T:SGDE.Content.Code.Library.Global">
            <summary>
            Top level or global functions are available in any place where ActionScript is used, or in any user-defined class.
            </summary>
        </member>
        <member name="F:SGDE.Content.Code.Library.Global.undefined">
            <summary>
            A special value that applies to untyped variables that have not been initialized or dynamic object properties that are not initialized.
            </summary>
        </member>
        <member name="T:SGDE.Content.DataTypes.GameContent">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:SGDE.Content.DataTypes.GameContent.GotoLevel(System.Int32)">
            <summary>
            Goto a specific level.
            </summary>
            <param name="level">The zero-based index of the level to go to.</param>
        </member>
        <member name="M:SGDE.Content.DataTypes.GameContent.NextLevel">
            <summary>
            Go to the next level based on level order, if possible.
            </summary>
            <returns><code>true</code> if level was progressed. <code>false</code> if couldn't load level, usually because the level order is done.</returns>
        </member>
        <member name="M:SGDE.Content.DataTypes.GameContent.Setup(SGDE.Game@)">
            <summary>
            Setup one-time game settings.
            </summary>
            <param name="game">The Game that will be set.</param>
        </member>
        <member name="M:SGDE.Content.DataTypes.GameContent.GetMapContent``1(System.String)">
            <summary>
            Get content from the current map that has an developer ID (DID) assigned to it.
            </summary>
            <typeparam name="T">The type of content to load.</typeparam>
            <param name="did">The developer ID of the game content.</param>
            <returns>The game content, if it exists, or the default value of the requested type.</returns>
        </member>
        <member name="M:SGDE.Content.DataTypes.GameContent.Process(SGDE.Game@)">
            <summary>
            Process all Code elements.
            </summary>
            <param name="game">The Game to process the Code elements on.</param>
        </member>
        <member name="P:SGDE.Content.DataTypes.GameContent.CurrentLevel">
            <summary>
            Get the current level of the Game.
            </summary>
        </member>
        <member name="P:SGDE.Content.DataTypes.GameContent.NumberOfLevels">
            <summary>
            Get the number of levels.
            </summary>
        </member>
        <member name="P:SGDE.Content.DataTypes.GameContent.Entities">
            <summary>
            Get the Entities for the specified map.
            </summary>
        </member>
        <member name="P:SGDE.Content.DataTypes.GameContent.MapName">
            <summary>
            Get the current Map name. Will be null if none exists.
            </summary>
        </member>
        <member name="T:SGDE.Input.Touchscreen">
            <summary>
            A touchscreen input device.
            </summary>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetCurrentState">
            <summary>
            Get the current Mouse input state.
            </summary>
            <returns>The current, native, input state of the Mouse.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetPastState">
            <summary>
            Get the past Mouse input state.
            </summary>
            <returns>The past, native, input state of the Mouse.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetGesture">
            <summary>
            Get's a gesture if one exists. <see cref="P:SGDE.Input.Touchscreen.IsGesturesAvalible"/>
            </summary>
            <returns>A gesture, if one exists.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetTouchLocations">
            <summary>
            Get the current touch locations.
            </summary>
            <returns>The current touch locations.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetPastTouchLocations">
            <summary>
            Get the past touch locations.
            </summary>
            <returns>The past touch locations.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetTouchLocationsDIff">
            <summary>
            Get the difference between touch locations. This matches up TouchLocations by ID and returns the difference between them. Only points that exist on both are returned. All fields (besides ID and Position) are ignored.
            </summary>
            <returns>The difference between touch locations.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetLocationByID(System.Int32)">
            <summary>
            Get the current touch location for the specified ID.
            </summary>
            <param name="id">The ID of the touch location.</param>
            <returns>The touch location, if it exists.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetPastLocationByID(System.Int32)">
            <summary>
            Get the past touch location for the specified ID.
            </summary>
            <param name="id">The ID of the past touch location.</param>
            <returns>The past touch location, if it exists.</returns>
        </member>
        <member name="M:SGDE.Input.Touchscreen.GetDiffLocationByID(System.Int32)">
            <summary>
            Get the difference between present and past touch locations for the specified ID. Only points that exist on both are returned. All fields (besides ID and Position) are ignored.
            </summary>
            <param name="id">The ID of the touch locations to get the difference of.</param>
            <returns>The touch location difference, if it exists. If it exists the TouchState will be Pressed regardless of it's actual state or difference in state.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SGDE.Input.Touchscreen.Type" -->
        <member name="P:SGDE.Input.Touchscreen.IsConnected">
            <summary>
            Get if the touchscreen device is currently connected.
            </summary>
        </member>
        <member name="P:SGDE.Input.Touchscreen.EnabledGestures">
            <summary>
            Get the currently enabled gestures.
            </summary>
        </member>
        <member name="P:SGDE.Input.Touchscreen.IsGesturesAvalible">
            <summary>
            Get if touch a gesture is avalible to be read.
            </summary>
        </member>
        <member name="P:SGDE.Input.Touchscreen.MaxSupportedTouchCount">
            <summary>
            Get the maximum number of supported touch points.
            </summary>
        </member>
        <member name="P:SGDE.Input.Touchscreen.TouchCount">
            <summary>
            Get the number of touch points.
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.SVGReader">
            <summary>
            Read and process a SVG class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.SVGReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.Graphics.SVG.SVG)">
            <summary>
            Read a SVG.
            </summary>
        </member>
        <member name="T:SGDE.Content.Readers.SpriteManagerReader">
            <summary>
            Read and process a SpriteManager class
            </summary>
        </member>
        <member name="M:SGDE.Content.Readers.SpriteManagerReader.Read(Microsoft.Xna.Framework.Content.ContentReader,SGDE.Graphics.SpriteManager)">
            <summary>
            Read a SpriteManager.
            </summary>
        </member>
    </members>
</doc>
